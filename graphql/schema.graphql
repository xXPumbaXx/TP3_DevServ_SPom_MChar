scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# Query
type Query {
    film(input: FilmInput): Film @find
    films(input: FilmsInput! @spread): [Film!]! @paginate(defaultCount: 10)
    me: User @auth
}

input FilmInput {
    id: ID! @eq @rules(apply: ["required"])
}

input FilmsInput {
    title: String @where(operator: "LIKE"),
    description: String @where(operator: "LIKE"),
    release_year: Int @where(operator: ">="),
    min: Int @where(operator: ">=", key: "length"),
    max: Int @where(operator: "<=", key: "length")
}



# Mutation
type Mutation {
    updateAverageScore(input: UpdateAverageScoreInput! @spread): AverageScoreOutput! @inject(context:"user.id", name: "user_id")
    addActor(input: AddActorInput! @spread): Actor! @can(ability: "create")
}

type AverageScoreOutput {
    score: Float!,
    votes: Int!,
    film_id: ID
}

input UpdateAverageScoreInput {
    score: Float! @rules(apply: ["required"]), 
    comment: String! @rules(apply: ["required"]), 
    film_id: Int! @rules(apply: ["required"])
}

input AddActorInput {
    last_name: String! @rules(apply: ["required"]),
    first_name: String! @rules(apply: ["required"]),
    birthdate: String! @rules(apply: ["required"]),
    associated_films: [ID!]! @rules(apply: ["required"]),
    update_film_image: [UpdateFilmImageInput!]! @rules(apply: ["required"])
}

input UpdateFilmImageInput {
    id: ID! @rules(apply: ["required"]),
    image: String! @rules(apply: ["required"])
}



# Tables
type Actor {
    id: ID!
    last_name: String!
    first_name: String!
    birthdate: String!
    films: [Film!]! @belongsToMany
}

type Critic {
    id: ID!
    user_id: ID!
    film_id: ID!
    score: Int!
    comment: String!
    film: Film! @belongsTo
    user: User! @belongsTo
}

type Film {
    id: ID!
    title: String!
    release_year: Int!
    length: Int!
    description: String!
    rating: String!
    language_id: ID!
    special_features: String
    image: String
    language: Language! @belongsTo
    critics: [Critic!]! @hasMany
    actors: [Actor!]! @belongsToMany
}

type Language {
    id: ID!
    name: String!
    films: [Film!]! @hasMany
}

type Role {
    id: ID!
    name: String!
    users: [User!]! @hasMany
}

type User {
    id: ID!
    login: String!
    email: String!
    last_name: String!
    first_name: String!
    role_id: ID!
    email_verified_at: DateTime
    critics: [Critic!]! @hasMany
    role: Role! @belongsTo
}

type CriticFilm {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    film_id: ID!
    source: String!
    score: Float!
    votes: Int!
    film: Film! @belongsTo
}